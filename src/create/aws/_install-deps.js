let path = require('path')
let fs = require('fs')
let spawn = require('child_process').spawnSync
let mkdir = require('mkdirp').sync
let npm = require('../../hydrate/providers/npm')
let copyCommon = require('../../hydrate/shared/_copy')

/**
 */
function node({absolutePath, relativePath, app, arc, idx}, callback) {
  // if node we write 
  // - package.json
  // - install architect/functions and architect/data
  // - package-lock.json (generated by above)
  // - src/shared --------> node_modules/@architect/shared
  // - src/views ---------> node_modules/@architect/views
  // - src/shared/.arc ---> node_modules/@architect/shared/.arc
  let pathToPkg = path.join(absolutePath, 'package.json')
  let pkg = JSON.stringify({name:`${app}-${idx}`}, null, 2)
  fs.writeFileSync(pathToPkg, pkg)

  let pathToCode = relativePath.split()
  let args = ['i', '@architect/functions', '@architect/data']
  npm([[absolutePath, args]], function done(err) {
    if (err) callback(err)
    else copyCommon({arc, pathToCode}, callback)
  })
}

function python({absolutePath, app, arc, idx}, callback) {
  // ensure .arc-config
  fs.writeFileSync(path.join(absolutePath, '.arc-config'), `@aws
runtime python`)
  // if python we write 
  // - requirements.txt 
  let reqs = `architect-functions==0.0.1` 
  fs.writeFileSync(path.join(absolutePath, 'requirements.txt'), reqs)
  // write a /vendor dir
  let bundle = path.join(absolutePath, 'vendor')
  mkdir(bundle)
  // run the package manager
  let cmd = 'pip'
  let args = ['install', '-r', 'requirements.txt', '--target', './vendor']
  let options = {cwd:absolutePath, shell:true}
  let result = spawn(cmd, args, options)
  callback()
}

function ruby({absolutePath, app, arc, idx}, callback) {
  // if ruby we write 
  // - .arc-config
  // - Gemfile
  // - .bundle/config
  // - run bundle install
  // - generatesâ€¦a whole bunch of stuff
  // - src/shared --------> architect/shared
  // - src/views ---------> architect/views
  // - src/shared/.arc ---> architect/shared/.arc
  // ensure .arc-config
  fs.writeFileSync(path.join(absolutePath, '.arc-config'), `@aws
runtime ruby`)
  let GemFile = `source "https://rubygems.org"
gem "architect-functions"` 
  fs.writeFileSync(path.join(absolutePath, 'GemFile'), GemFile)
  let bundle = path.join(absolutePath, '.bundle')
  mkdir(bundle)
  let config = `---
BUNDLE_PATH: "vendor"`
  fs.writeFileSync(path.join(bundle, 'config'), config)
  let options = {cwd:absolutePath, shell:true}
  let result = spawn('bundle', ['install'], options)
  callback()
}

/**
 * installs initial deps according to runtime
 * 
 * expects params:
 *
 * - absolutePath 
 * - relativePath
 * - arc
 * - app
 * - idx
 */
module.exports = function installer(params, callback) {
  let providers = {node, python, ruby}
  let packager = 'node'
  let runtime = params.arc.aws && params.arc.aws.find(t=> t[0] === 'runtime')
  if (runtime) {
    let val = runtime[1]
    let allowed = Object.keys(providers)
    if (allowed.includes(val))
      packager = val
  }
  providers[packager].call({}, params, callback)
}
